<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ output extension=".cs" #>

<#
    var inputFilePath = @"../../PinupMobile.Droid/Resources/values/strings.xml";
    var provider = new CSharpCodeProvider();

    SetCurrentDirectory();
    if (File.Exists(inputFilePath)) {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was auto-generated from Translation.tt
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PinupMobile.Core.Strings
{
    [System.CodeDom.Compiler.GeneratedCode("Transation.tt", "1")]
    public class Translation
    {
        private static ILocalisation _stringLoader;

        public static ILocalisation StringLoader
        {
            get { return _stringLoader; }
            set { _stringLoader = value; }
        }
<#
        foreach (var resource in GetResources(inputFilePath)) {
#>
        /// <summary>
        ///   Looks up a string similar to <#= resource.Value.Replace("\n", "\n        /// ").Replace("&", "&amp;") #>
        /// </summary>
        public static string <#= provider.CreateEscapedIdentifier(resource.Key.Replace(".Text", String.Empty).Replace(".Content", String.Empty).Replace(".FlowDirection", string.Empty)) #> {
            get { return StringLoader.GetString("<#= resource.Key.Replace(".Text", String.Empty).Replace(".Content", String.Empty).Replace(".FlowDirection", string.Empty) #>"); }
        }

<#
        }
#>

        /// <summary>
        /// Looks up any string in the translated resources.
        /// </summary>
        public static string Get(string key)
        {
            return StringLoader.GetString(key);
        }
    }
}
<#
    } else {
        throw new FileNotFoundException(String.Format("Unable to find Resource file: {0}", inputFilePath)); 
    } 
#>

<#+
        private void SetCurrentDirectory() 
        {
            Directory.SetCurrentDirectory(Host.ResolvePath("./"));
        }
    
        private static List<KeyValuePair<string,string>> GetResources(string filePath) 
        {
            XDocument doc = XDocument.Load(filePath);
            var rootElement = doc.Root;
            if (rootElement == null)
            {
                throw new InvalidOperationException("No root element was found");
            }
            var dataElements = rootElement.Elements().ToList();
            var resources = dataElements.Select(e => new KeyValuePair<string, string>(e.Attribute("name").Value, e.Value)).ToList();
            return resources;
       }

#>